// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "http://www.example.com/support"
        },
        "license": {
            "name": "MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/capsules": {
            "post": {
                "description": "Создает новое событие с заданными параметрами",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "capsules"
                ],
                "summary": "Создать новое событие",
                "parameters": [
                    {
                        "description": "Данные для создания события",
                        "name": "capsule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateCapsuleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно создано событие",
                        "schema": {
                            "$ref": "#/definitions/models.CapsuleResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Не удалось создать событие",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/feedback": {
            "post": {
                "description": "Создаёт запись отзыва пользователя",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "feedback"
                ],
                "summary": "Отправить отзыв",
                "parameters": [
                    {
                        "description": "Данные для создания отзыва",
                        "name": "feedback",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateFeedbackRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Успешно создан отзыв",
                        "schema": {
                            "$ref": "#/definitions/models.FeedbackResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Не удалось создать событие",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/generate-presigned-url": {
            "get": {
                "description": "Generates a presigned URL for uploading a file to MinIO in a specific directory (UUID).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "file"
                ],
                "summary": "Generate a presigned URL for file upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID4 directory for file upload",
                        "name": "directory",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Presigned URL for file upload",
                        "schema": {
                            "$ref": "#/definitions/models.PresignedURLResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/send-test-email": {
            "post": {
                "description": "Генерируем и отправляем тестовый email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "email"
                ],
                "summary": "Отправить тестовый email",
                "parameters": [
                    {
                        "description": "Данные для отправки по почте",
                        "name": "email",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.EmailDataRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Письмо успешно отправлено"
                    },
                    "400": {
                        "description": "Некорректные данные",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Не удалось отправить письмо",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CapsuleResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "files_folder_uuid": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "recipient_email": {
                    "type": "string"
                },
                "send_at": {
                    "type": "string"
                },
                "sender_name": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "models.CreateCapsuleRequest": {
            "type": "object",
            "required": [
                "message",
                "recipient_email",
                "send_at",
                "sender_name"
            ],
            "properties": {
                "files_folder_uuid": {
                    "type": "string",
                    "example": "07023417-5079-429d-a113-cbef2ef164d7"
                },
                "message": {
                    "type": "string",
                    "maxLength": 4096,
                    "example": "Test Message"
                },
                "recipient_email": {
                    "type": "string",
                    "example": "test@example.com"
                },
                "send_at": {
                    "type": "string",
                    "example": "2024-11-18"
                },
                "sender_name": {
                    "type": "string",
                    "example": "John Doe"
                }
            }
        },
        "models.CreateFeedbackRequest": {
            "type": "object",
            "required": [
                "message"
            ],
            "properties": {
                "message": {
                    "type": "string",
                    "maxLength": 4096,
                    "example": "Test Message"
                }
            }
        },
        "models.EmailDataRequest": {
            "type": "object",
            "required": [
                "body",
                "recipient_email",
                "subject"
            ],
            "properties": {
                "body": {
                    "type": "string",
                    "maxLength": 4096,
                    "example": "Test body"
                },
                "files_folder_uuid": {
                    "type": "string",
                    "example": "07023417-5079-429d-a113-cbef2ef164d7"
                },
                "recipient_email": {
                    "type": "string",
                    "example": "test@example.com"
                },
                "subject": {
                    "type": "string",
                    "example": "Test subject"
                }
            }
        },
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.FeedbackResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.PresignedURLResponse": {
            "type": "object",
            "properties": {
                "presigned_url": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Time Capsule Memories API",
	Description:      "This is a sample server for Time Capsule Memories.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
